ideas:

usar un booleano llamado is_received dentro de la sliding widnow, asi puedo saber si se recibió el mensaje o no (así no tengo que usar numeros de 
secuencia u otras cosas)
usar un timer dentro de la sliding window, esto me ayudaría  a saber los timeout sin necesidad de una clase adicional.

|| [3] [4] [5] || [6] [7] [8] [3] [4] [5] [6]

---SENDING [3]--->
---SENDING [4]--->
---SENDING [5]--->

CASO 1:
<--- ACK [3] ---    # MOVE 1 SLIDING WINDOW, EMISOR AND RECEPTOR
<--- ACK [4] ---    # MOVE 1 SLIDING WINDOW, EMISOR AND RECEPTOR
<--- ACK [5] ---    # MOVE 1 SLIDING WINDOW, EMISOR AND RECEPTOR
---SENDING [6] ---> # SEND WINDOW[0]
---SENDING [8] ---> # SEND WINDOW[1]
---SENDING [7] ---> # SEND WINDOW[2]

CASO 2:

<--- ACK [3] ---    # MOVE 1 SLIDING WINDOW, EMISOR AND RECEPTOR

TIMEOUT             # TIMEOUT

---SENDING [4]--->  # SEND WINDOW[0]
---SENDING [5]--->  # SEND WINDOW[1]
---SENDING [6]--->  # SEND WINDOW[2]

CASO 3:

<--- ACK [5] ---    # EMISOR DONT MOVE THE WINDOW
---SENDING [3]--->  # SEND WINDOW[0]
---SENDING [4]--->  # SEND WINDOW[1]

CASO 4:
<--- ACK [3] ---    # MOVE 1 SLIDING WINDOW EMISOR AND RECEPTOR

<--- ACK [5] ---    # DONT MOVE_WINDOW EMISOR
---SENDING [4]--->  # SEND WINDOW[1]
---SENDING [5]--->  # SEND WINDOW[1]


CASO 5

---EMISOR: SENDING MESSAGE[3] --->
---EMISOR: SENDING MESSAGE[4] ---> 
---EMISOR: SENDING MESSAGE[5] --->
<--- RECEPTOR: RECEIVING MESSAGE[3] MOVES 1 SW
--- RECEPTOR: SENDING ACK[3] --->
<--- EMISOR: RECEIVING ACK[3] ---   MOVES 1 SW
<--- RECEPTOR: RECEIVING MESSAGE[4] MOVES 1 SW
--- RECEPTOR: SENDING ACK[4] --->
<--- EMISOR: RECEIVING ACK[4] ---   MOVES 1 SW
<--- RECEPTOR: RECEIVING MESSAGE[5] MOVES 1 SW
--- RECEPTOR: SENDING ACK[5] --->
<--- EMISOR: RECEIVING ACK[5] ---   MOVES 1 SW

CASO 5.1

---EMISOR: SENDING MESSAGE[3] --->
---EMISOR: SENDING MESSAGE[4] --->      X LOSS
---EMISOR: SENDING MESSAGE[5] --->
<--- RECEPTOR: RECEIVING MESSAGE[3] MOVES 1 SW
--- RECEPTOR: SENDING ACK[3] --->
<--- EMISOR: RECEIVING ACK[3] ---   MOVES 1 SW
<--- RECEPTOR: RECEIVING MESSAGE[5] SAVE MESSAGE[5] BUT DOESNT MOVE THE SW
--- RECEPTOR: SENDING ACK[5] --->
<--- EMISOR: RECEIVING ACK[5] ---   DOESNT MOVE THE SW

---EMISOR: SENDING MESSAGE[4] AGAIN--->
<--- RECEPTOR: RECEIVING MESSAGE[4] MOVES 2 SW (bc message[5] was already received)
--- RECEPTOR: SENDING ACK[4] --->
<--- EMISOR: RECEIVING ACK[4] ---   MOVES 2 SW (bc ack[5] was already received)

CASO 5.1

---EMISOR: SENDING MESSAGE[3] --->
---EMISOR: SENDING MESSAGE[4] --->
---EMISOR: SENDING MESSAGE[5] --->
<--- RECEPTOR: RECEIVING MESSAGE[3] MOVES 1 SW
--- RECEPTOR: SENDING ACK[3] --->
<--- EMISOR: RECEIVING ACK[3] ---   MOVES 1 SW
<--- RECEPTOR: RECEIVING MESSAGE[4] MOVES 1 SW
--- RECEPTOR: SENDING ACK[4] ---> X LOSS

<--- RECEPTOR: RECEIVING MESSAGE[5] --- MOVES 1 SW
--- RECEPTOR: SENDING ACK[5] --->
<--- EMISOR: RECEIVING ACK[5] ---   DOESNT MOVE THE SW (ack[4] is not received by the emisor)

---EMISOR: SENDING MESSAGE[4] AGAIN--->
<--- RECEPTOR: RECEIVING MESSAGE[4] MOVES 2 SW (bc message[5] was already received)
--- RECEPTOR: SENDING ACK[4] --->
<--- EMISOR: RECEIVING ACK[4] ---   MOVES 2 SW (bc ack[5] was already received)

---EMISOR: SENDING MESSAGE[4] AGAIN--->
<--- RECEPTOR: RECEIVING MESSAGE[4]--- seq=4 is not part of the sequences that I was waiting, and it is less than the lass arrived sequence so I send ack[4] again
--- RECEPTOR: SENDING ACK[4] AGAIN--->
<--- EMISOR: RECEIVING ACK[4] ---   MOVES 2 SW (bc ack[5] was already received)



|| [3] [4] [5] || [6] [7] [8] [3] [4] [5] [6]

|| [3] [4] [5] || [6] [7] [8] [3] [4] [5] [6]